(()=>{"use strict";var __webpack_modules__={948:()=>{eval('\n;// CONCATENATED MODULE: ./src/components/base-component.ts\n//can have one default and can use with custom name in import\r\n//Component base class\r\nclass Component {\r\n    constructor(templateId, hostElementId, insertAtStart, newElementId) {\r\n        this.templateElement = document.getElementById(templateId);\r\n        this.hostElement = document.getElementById(hostElementId);\r\n        const importedNode = document.importNode(this.templateElement.content, true);\r\n        this.element = importedNode.firstElementChild;\r\n        if (newElementId) {\r\n            this.element.id = newElementId;\r\n        }\r\n        this.attach(insertAtStart);\r\n    }\r\n    attach(insertAtBeginning) {\r\n        this.hostElement.insertAdjacentElement(insertAtBeginning ? \'afterbegin\' : \'beforeend\', this.element);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/util/validation.ts\nfunction validate(validatableInput) {\r\n    let isValid = true;\r\n    if (validatableInput.required) {\r\n        isValid = isValid && validatableInput.value.toString().trim().length !== 0;\r\n    }\r\n    if (validatableInput.minLength != null &&\r\n        typeof validatableInput.value === "string") {\r\n        isValid =\r\n            isValid && validatableInput.value.length >= validatableInput.minLength;\r\n    }\r\n    if (validatableInput.maxLength != null &&\r\n        typeof validatableInput.value === "string") {\r\n        isValid =\r\n            isValid && validatableInput.value.length <= validatableInput.maxLength;\r\n    }\r\n    if (validatableInput.min != null &&\r\n        typeof validatableInput.value === "number") {\r\n        isValid = isValid && validatableInput.value >= validatableInput.min;\r\n    }\r\n    if (validatableInput.max != null &&\r\n        typeof validatableInput.value === "number") {\r\n        isValid = isValid && validatableInput.value <= validatableInput.max;\r\n    }\r\n    return isValid;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/decorators/autobind.ts\n//autobind descriptor\r\nfunction autobind(target, methodName, descriptor) {\r\n    const originalMethod = descriptor.value;\r\n    const adjDescriptor = {\r\n        configurable: true,\r\n        get() {\r\n            const boundFn = originalMethod.bind(this);\r\n            return boundFn;\r\n        },\r\n    };\r\n    return adjDescriptor;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/models/project.ts\n//Project Type\r\nvar ProjectStatus;\r\n(function (ProjectStatus) {\r\n    ProjectStatus[ProjectStatus["Active"] = 0] = "Active";\r\n    ProjectStatus[ProjectStatus["Finished"] = 1] = "Finished";\r\n})(ProjectStatus || (ProjectStatus = {}));\r\nclass Project {\r\n    constructor(id, title, description, people, status) {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.description = description;\r\n        this.people = people;\r\n        this.status = status;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/state/project-state.ts\n\r\nclass State {\r\n    constructor() {\r\n        this.listeners = [];\r\n    }\r\n    addListener(listenFn) {\r\n        this.listeners.push(listenFn);\r\n    }\r\n}\r\nclass ProjectState extends State {\r\n    constructor() {\r\n        super();\r\n        this.projects = [];\r\n    }\r\n    static getInstance() {\r\n        if (this.instance) {\r\n            return this.instance;\r\n        }\r\n        this.instance = new ProjectState();\r\n        return this.instance;\r\n    }\r\n    addProject(title, description, numOfPeople) {\r\n        // const newProject={\r\n        //     id:Math.random().toString(),\r\n        //     title:title,\r\n        //     description:description,\r\n        //     people:numOfPeople\r\n        // };\r\n        const newProject = new Project(Math.random().toString(), title, description, numOfPeople, ProjectStatus.Active);\r\n        this.projects.push(newProject);\r\n        this.updateListeners();\r\n    }\r\n    moveProject(id, newStatus) {\r\n        const project = this.projects.find((prj) => prj.id === id);\r\n        if (project && project.status !== newStatus) {\r\n            project.status = newStatus;\r\n            this.updateListeners();\r\n        }\r\n    }\r\n    updateListeners() {\r\n        for (const listenerFn of this.listeners) {\r\n            listenerFn(this.projects.slice());\r\n        }\r\n    }\r\n}\r\n//console.log("running.......") //prints only once\r\nconst projectState = ProjectState.getInstance();\r\n//projectState imported in multiple files ,but still it imported only once by the file which calls first\r\n\n;// CONCATENATED MODULE: ./src/components/project-input.ts\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n\r\n\r\n//projectInput class\r\nclass ProjectInput extends Component {\r\n    constructor() {\r\n        super("project-input", "app", true, "user-input");\r\n        this.titleInputElement = this.element.querySelector("#title1");\r\n        this.descriptionInputElement = this.element.querySelector("#description");\r\n        this.peopleInputElement = this.element.querySelector("#people");\r\n        this.configure();\r\n    }\r\n    configure() {\r\n        this.element.addEventListener("submit", this.handleSubmit);\r\n    }\r\n    renderContent() {\r\n    }\r\n    gatherUserInput() {\r\n        const enteredTiltle = this.titleInputElement.value;\r\n        const enteredDescription = this.descriptionInputElement.value;\r\n        const enteredPeople = this.peopleInputElement.value;\r\n        const titleValidatable = {\r\n            value: enteredTiltle,\r\n            required: true,\r\n        };\r\n        const descriptionValidatable = {\r\n            value: enteredDescription,\r\n            required: true,\r\n            minLength: 5,\r\n        };\r\n        const peopleValidatable = {\r\n            value: +enteredPeople,\r\n            required: true,\r\n            min: 1,\r\n            max: 5,\r\n        };\r\n        //   if(enteredTiltle.trim().length===0||enteredDescription.trim().length===0||enteredPeople.trim().length===0){\r\n        if (!validate(titleValidatable) ||\r\n            !validate(descriptionValidatable) ||\r\n            !validate(peopleValidatable)) {\r\n            alert("Invalid Input");\r\n            return;\r\n        }\r\n        else {\r\n            return [enteredTiltle, enteredDescription, +enteredPeople];\r\n        }\r\n    }\r\n    clearInputs() {\r\n        this.titleInputElement.value = "";\r\n        this.descriptionInputElement.value = "";\r\n        this.peopleInputElement.value = "";\r\n    }\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const userInput = this.gatherUserInput();\r\n        if (Array.isArray(userInput)) {\r\n            const [title, description, people] = userInput;\r\n            projectState.addProject(title, description, people);\r\n            //console.log(title, description, people);\r\n            this.clearInputs();\r\n        }\r\n        // console.log(this.titleInputElement.value)\r\n        // console.log(this.descriptionInputElement.value)\r\n        // console.log(this.peopleInputElement.value)\r\n    }\r\n}\r\n__decorate([\r\n    autobind\r\n], ProjectInput.prototype, "handleSubmit", null);\r\n\n;// CONCATENATED MODULE: ./src/components/project-item.ts\nvar project_item_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n//ProjectItem Class\r\nclass ProjectItem extends Component {\r\n    constructor(hostId, project) {\r\n        super("single-project", hostId, false, project.id);\r\n        this.project = project;\r\n        this.configure();\r\n        this.renderContent();\r\n    }\r\n    get persons() {\r\n        if (this.project.people === 1) {\r\n            return \'1 person\';\r\n        }\r\n        else {\r\n            return `${this.project.people} persons`;\r\n        }\r\n    }\r\n    dragStartHandler(event) {\r\n        //console.log(event);\r\n        event.dataTransfer.setData("text/plain", this.project.id);\r\n        event.dataTransfer.effectAllowed = \'move\';\r\n    }\r\n    dragEndHandler(_) {\r\n        console.log("drag end");\r\n    }\r\n    configure() {\r\n        this.element.addEventListener(\'dragstart\', this.dragStartHandler);\r\n        this.element.addEventListener(\'dragend\', this.dragEndHandler);\r\n    }\r\n    renderContent() {\r\n        this.element.querySelector(\'h2\').textContent = this.project.title;\r\n        this.element.querySelector(\'h3\').textContent = this.persons + \' assigned\';\r\n        //console.log(this.persons);\r\n        this.element.querySelector(\'p\').textContent = this.project.description;\r\n    }\r\n}\r\nproject_item_decorate([\r\n    autobind\r\n], ProjectItem.prototype, "dragStartHandler", null);\r\n\n;// CONCATENATED MODULE: ./src/components/project-list.ts\nvar project_list_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n//projectList class\r\nclass ProjectList extends Component {\r\n    constructor(type) {\r\n        super("project-list", "app", false, `${type}-projects`);\r\n        this.type = type;\r\n        this.assignedProjects = [];\r\n        this.configure();\r\n        this.renderContent();\r\n    }\r\n    dragOverHandler(event) {\r\n        if (event.dataTransfer && event.dataTransfer.types[0] === \'text/plain\') {\r\n            event.preventDefault();\r\n            const listEl = this.element.querySelector(\'ul\');\r\n            listEl.classList.add(\'droppable\');\r\n        }\r\n    }\r\n    dropHandler(event) {\r\n        const prid = event.dataTransfer.getData("text/plain");\r\n        projectState.moveProject(prid, this.type === \'active\' ? ProjectStatus.Active : ProjectStatus.Finished);\r\n    }\r\n    dragLeaveHandler(event) {\r\n        const listEl = this.element.querySelector(\'ul\');\r\n        listEl.classList.remove(\'droppable\');\r\n    }\r\n    configure() {\r\n        this.element.addEventListener(\'dragover\', this.dragOverHandler);\r\n        this.element.addEventListener(\'dragleave\', this.dragLeaveHandler);\r\n        this.element.addEventListener(\'drop\', this.dropHandler);\r\n        projectState.addListener((projects) => {\r\n            const relavantProjects = projects.filter(prj => {\r\n                if (this.type === \'active\') {\r\n                    return prj.status === ProjectStatus.Active;\r\n                }\r\n                return prj.status === ProjectStatus.Finished;\r\n            });\r\n            this.assignedProjects = relavantProjects;\r\n            this.renderProjects();\r\n        });\r\n    }\r\n    renderContent() {\r\n        const listId = `${this.type}-projects-list`;\r\n        this.element.querySelector(\'ul\').id = listId;\r\n        this.element.querySelector(\'h2\').textContent = this.type.toUpperCase() + \' PROJECTS\';\r\n    }\r\n    renderProjects() {\r\n        const listE1 = document.getElementById(`${this.type}-projects-list`);\r\n        listE1.innerHTML = \'\';\r\n        for (const pItem of this.assignedProjects) {\r\n            new ProjectItem(this.element.querySelector(\'ul\').id, pItem);\r\n        }\r\n    }\r\n}\r\nproject_list_decorate([\r\n    autobind\r\n], ProjectList.prototype, "dragOverHandler", null);\r\nproject_list_decorate([\r\n    autobind\r\n], ProjectList.prototype, "dropHandler", null);\r\nproject_list_decorate([\r\n    autobind\r\n], ProjectList.prototype, "dragLeaveHandler", null);\r\n\n;// CONCATENATED MODULE: ./src/app.ts\n\r\n\r\nconst ip = new ProjectInput();\r\nconst activePList = new ProjectList("active");\r\nconst finishPList = new ProjectList("finished");\r\n// ///<reference path="./components/base-component.js"/>\r\n// namespace App{\r\n// }\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///948\n')}},__webpack_exports__={};__webpack_modules__[948]()})();